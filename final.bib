@online {rustlang,
    title = {{The Rust Language Reference}},
    author = {{Rustlang team}},
    year = {2020},
    url = "https://doc.rust-lang.org/"
}

@book {programmingrust,
    title = {{Programming Rust}},
    author = {Blandy, Jim and Orendorff, Jason and Tindall, Leonora F.S.},
    edition = {1st},
    year = {2017},
    publisher = {O'Reilly Media Inc.},
    isbn = {9781492052593}
}

@article {fossdatasci2020,
    title = {{Doing Data Science on the Shoulders of Giants: The Value of Open Source Software for the Data Science Community}},
    author = {Malone, Katie and Wolski, Rich},
    year = {2020},
    volume = {2},
    publisher = {{Harvard Data Science Review}}
}

@online {ps4freebsd,
    title = {{Sony's PlayStation 4 is Running Modified FreeBSD}},
    author = {Michael Larabel},
    year = {2013},
    url = "https://www.phoronix.com/scan.php?page=news_item&px=mtm5ndi"
}

@online {rustrfcs,
    title = {{Rust RFCs}},
    author = {{rust-lang}},
    year = {2020},
    url = "https://github.com/rust-lang/rfcs"
}

@online {rustmainrepo,
    title = {{Rust Programming Language}},
    author = {{rust-lang}},
    year = {2020},
    url = "https://github.com/rust-lang/rust"
}

@online {rustteammeets,
    title = {{Lang Team Meetings}},
    author = {{Niko Matsakis}},
    year = {2019},
    url = "https://internals.rust-lang.org/t/lang-team-meetings/9573"
}

@online {stackoverflowdevsurvey2020,
    title = {{Stack Overflow Developer Survey 2020}},
    author = {{Stack Overflow}},
    year = {2020},
    url = "https://insights.stackoverflow.com/survey/2020"
}

@online {firefoxoxidation,
    title = {Oxidation},
    author = {Mozilla},
    year = {2020},
    url = "https://wiki.mozilla.org/Oxidation"
}

@online {lunduke31317,
    title = {{"RedoxOS (microkernel OS written in Rust)" - Lunduke Hour - Mar 13, 2017}},
    author = {Bryan Lunduke and Jeremy Soller},
    year = {2017},
    url = "https://www.youtube.com/watch?v=eH5JgMlNE8o"
}

@online {gallant2016,
    title = {{ripgrep is faster than \{grep, ag, git grep, ucg, pt, sift\}}},
    author = {Andrew Gallant},
    year = {2016},
    url = "https://blog.burntsushi.net/ripgrep/"
}

@online {chromiummem70,
    title = {{Memory Safety - The Chromium Projects}},
    author = {{Chromium Project}},
    url = "https://www.chromium.org/Home/chromium-security/memory-safety"
}

@online {hosfeltrewrite2019,
    title = {{Implications of Rewriting a Browser Component in Rust}},
    author = {Diane Hosfelt},
    year = {2019},
    url = "https://hacks.mozilla.org/2019/02/rewriting-a-browser-component-in-rust/"
}

@online {hosfeltsafety2019,
    title = {{Fearless Security: Memory Safety}},
    author = {Diane Hosfelt},
    year = {2019},
    url = "https://hacks.mozilla.org/2019/01/fearless-security-memory-safety/"
}

@online {applerust2020,
    title = {{Even Apple is Interested in Migrating Their C Code to Rust}},
    author = {Michael Larabel},
    year = {2020},
    url = "https://www.phoronix.com/scan.php?page=news_item&px=Apple-From-C-To-Rust"
}

@online {microsoftrust2020,
    title = {{So What's Up with Microsoft's (and Everyone Else's) Love of Rust?}},
    author = {David Ramel},
    year = {2020},
    url = "https://visualstudiomagazine.com/articles/2020/06/02/rust-love.aspx"
}

@online {amazonrust2020,
    title = {{Why AWS loves Rust, and how we’d like to help}},
    author = {Matt Asay},
    year = {2020},
    url = "https://aws.amazon.com/blogs/opensource/why-aws-loves-rust-and-how-wed-like-to-help/"
}

@online {graphql,
    title = {{GraphQL | A Query Language for your API}},
    author = {{GraphQL Foundation}},
    year = {2020},
    url = "https://graphql.org/"
}

@article {networkx,
    author = {Hagberg, Aric A. and Schultz, Daniel A. and Swart, Pieter J.},
    year = {2008},
    title = {{Exploring network structure, dynamics, and function using NetworkX}},
    journal = {{Proceedings of the 7th Python in Science Conference (SciPy2008)}}
}

@article{Hunter:2007,
  Author    = {Hunter, J. D.},
  Title     = {Matplotlib: A 2D graphics environment},
  Journal   = {Computing in Science \& Engineering},
  Volume    = {9},
  Number    = {3},
  Pages     = {90--95},
  abstract  = {Matplotlib is a 2D graphics package used for Python for
  application development, interactive scripting, and publication-quality
  image generation across user interfaces and operating systems.},
  publisher = {IEEE COMPUTER SOC},
  doi       = {10.1109/MCSE.2007.55},
  year      = 2007
}

@software{reback2020pandas,
    author       = {The pandas development team},
    title        = {pandas-dev/pandas: Pandas},
    month        = feb,
    year         = 2020,
    publisher    = {Zenodo},
    version      = {latest},
    doi          = {10.5281/zenodo.3509134},
    url          = {https://doi.org/10.5281/zenodo.3509134}
}

@article{YU2016204,
    title = {Reviewer recommendation for pull-requests in GitHub: What can we learn from code review and bug assignment?},
    journal = {Information and Software Technology},
    volume = {74},
    pages = {204 - 218},
    year = {2016},
    issn = {0950-5849},
    doi = {https://doi.org/10.1016/j.infsof.2016.01.004},
    url = {http://www.sciencedirect.com/science/article/pii/S0950584916000069},
    author = {Yue Yu and Huaimin Wang and Gang Yin and Tao Wang},
    keywords = {Pull-request, Reviewer recommendation, Social network analysis},
    abstract = {Context: The pull-based model, widely used in distributed software development, offers an extremely low barrier to entry for potential contributors (anyone can submit of contributions to any project, through pull-requests). Meanwhile, the project’s core team must act as guardians of code quality, ensuring that pull-requests are carefully inspected before being merged into the main development line. However, with pull-requests becoming increasingly popular, the need for qualified reviewers also increases. GitHub facilitates this, by enabling the crowd-sourcing of pull-request reviews to a larger community of coders than just the project’s core team, as a part of their social coding philosophy. However, having access to more potential reviewers does not necessarily mean that it’s easier to find the right ones (the “needle in a haystack” problem). If left unsupervised, this process may result in communication overhead and delayed pull-request processing. Objective: This study aims to investigate whether and how previous approaches used in bug triaging and code review can be adapted to recommending reviewers for pull-requests, and how to improve the recommendation performance. Method: First, we extend three typical approaches used in bug triaging and code review for the new challenge of assigning reviewers to pull-requests. Second, we analyze social relations between contributors and reviewers, and propose a novel approach by mining each project’s comment networks (CNs). Finally, we combine the CNs with traditional approaches, and evaluate the effectiveness of all these methods on 84 GitHub projects through both quantitative and qualitative analysis. Results: We find that CN-based recommendation can achieve, by itself, similar performance as the traditional approaches. However, the mixed approaches can achieve significant improvements compared to using either of them independently. Conclusion: Our study confirms that traditional approaches to bug triaging and code review are feasible for pull-request reviewer recommendations on GitHub. Furthermore, their performance can be improved significantly by combining them with information extracted from prior social interactions between developers on GitHub. These results prompt for novel tools to support process automation in social coding platforms, that combine social (e.g., common interests among developers) and technical factors (e.g., developers’ expertise).}
}

@article{celinska2018,
    author = {Celi\'{n}ska, Dorota},
    title = {Coding Together in a Social Network: Collaboration among GitHub Users},
    year = {2018},
    isbn = {9781450363341},
    publisher = {Association for Computing Machinery}
}

@article{JARCZYK201832,
    title = {Surgical teams on GitHub: Modeling performance of GitHub project development processes},
    journal = {Information and Software Technology},
    volume = {100},
    pages = {32 - 46},
    year = {2018},
    issn = {0950-5849},
    doi = {https://doi.org/10.1016/j.infsof.2018.03.010},
    url = {http://www.sciencedirect.com/science/article/pii/S095058491730304X},
    author = {Oskar Jarczyk and Szymon Jaroszewicz and Adam Wierzbicki and Kamil Pawlak and Michal Jankowski-Lorek},
    keywords = {Open source software (OSS), Development process performance, Issue closure rate, Work centralization, Issue workflow, Surgical team}
}

@article{metz2015,
    title = {{How GitHub conquered Google, Microsoft, and Everyone Else}},
    author = {Cade Metz},
    year = {2015},
    url = "https://www.wired.com/2015/03/github-conquered-google-microsoft-everyone-else/"
}
